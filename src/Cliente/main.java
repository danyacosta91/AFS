/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Cliente;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JSeparator;
import javax.swing.JTextPane;
import javax.swing.JTree;
import javax.swing.UIManager;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

/**
 *
 * @author Ricardo
 */
public class main extends javax.swing.JFrame {

    Conectar _conectar = new Conectar(this);
    /**
     * Creates new form main
     */
    public main() {
        initComponents();
        userData = new ArrayList<>();
        File cacheDir = new File("./Cache");
        if (!cacheDir.exists()) {
            createCache();
        } else {
            if (new File("./Cache/Users/Users.txt").exists()) {
                loadUser();
                for (User x : userData) {
                    System.out.println(x.toString());
                }
            } else {
                File usersFile = new File("./Cache/Users/Users.txt");
                try {
                    usersFile.createNewFile();
                } catch (IOException ex) {
                    Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        this.setVisible(true);
        jm_command.setEnabled(false);
        jm_file.setEnabled(false);
        jd_logIn.pack();
        jd_logIn.setLocationRelativeTo(null);
        jd_logIn.setVisible(true);
        separatorList = new ArrayList<>();
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jd_logIn = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tf_login_user = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        pf_login_pass = new javax.swing.JPasswordField();
        jd_register = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        tf_register_name = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        pf_register_pass = new javax.swing.JPasswordField();
        pf_register_cpass = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        directoryTree = new javax.swing.JTree();
        tb_editor = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jm_command = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jm_file = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        jd_logIn.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jd_logIn.setTitle("Log In");
        jd_logIn.setModal(true);

        jLabel1.setText("Username");

        jButton1.setText("Log In");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Password");

        tf_login_user.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tf_login_userKeyPressed(evt);
            }
        });

        jButton2.setText("Register");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        pf_login_pass.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                pf_login_passKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jd_logInLayout = new javax.swing.GroupLayout(jd_logIn.getContentPane());
        jd_logIn.getContentPane().setLayout(jd_logInLayout);
        jd_logInLayout.setHorizontalGroup(
            jd_logInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_logInLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jd_logInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jd_logInLayout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jd_logInLayout.createSequentialGroup()
                        .addGroup(jd_logInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jd_logInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tf_login_user, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                            .addComponent(pf_login_pass))
                        .addGap(2, 2, 2)))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jd_logInLayout.setVerticalGroup(
            jd_logInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_logInLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jd_logInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tf_login_user, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jd_logInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(pf_login_pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jd_logInLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jd_register.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jd_register.setTitle("Register User");
        jd_register.setModal(true);
        jd_register.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                jd_registerWindowClosed(evt);
            }
        });

        jLabel3.setText("Username");

        jButton3.setText("Register");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setText("Password");

        jButton4.setText("Cancel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel5.setText("Confirm Password");

        javax.swing.GroupLayout jd_registerLayout = new javax.swing.GroupLayout(jd_register.getContentPane());
        jd_register.getContentPane().setLayout(jd_registerLayout);
        jd_registerLayout.setHorizontalGroup(
            jd_registerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_registerLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jd_registerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_registerLayout.createSequentialGroup()
                        .addGroup(jd_registerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jd_registerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tf_register_name, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                            .addComponent(pf_register_pass)
                            .addComponent(pf_register_cpass)))
                    .addGroup(jd_registerLayout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        jd_registerLayout.setVerticalGroup(
            jd_registerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_registerLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jd_registerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tf_register_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jd_registerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(pf_register_pass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jd_registerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(pf_register_cpass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jd_registerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        directoryTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        directoryTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                directoryTreeMousePressed(evt);
            }
        });
        directoryTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                directoryTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(directoryTree);

        jMenu3.setText("Console");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Log In");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem8.setText("Log Out");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Close");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuBar1.add(jMenu3);

        jm_command.setText("Command");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("New File");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jm_command.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("New Directory");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jm_command.add(jMenuItem3);

        jMenuBar1.add(jm_command);

        jm_file.setText("File");

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Save File");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jm_file.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem6.setText("Close");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jm_file.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        jMenuItem7.setText("Close Without Saving");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jm_file.add(jMenuItem7);

        jMenuBar1.add(jm_file);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tb_editor, javax.swing.GroupLayout.DEFAULT_SIZE, 859, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 511, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tb_editor)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        if( _selectedNode != null ){
            String dirName = JOptionPane.showInputDialog(null, "Ingrese el nombre del directorio");
            if( !dirName.equals("") ){
                DefaultMutableTreeNode tmp = _selectedNode;
                Stack tmp2 = new Stack();
                do{
                    tmp2.push(tmp.getUserObject().toString());
                    tmp = (DefaultMutableTreeNode)tmp.getParent();
                }while( !tmp.getUserObject().toString().equals("AFS") );
                String ruta = "AFS/";
                while( !tmp2.empty() )
                    ruta += tmp2.pop() + "/";
                if( _conectar.createDir( ruta, dirName ) ){
                    DefaultMutableTreeNode aNode = new DefaultMutableTreeNode();
                    aNode.setUserObject(dirName);            
                    _selectedNode.add(aNode);
                    directoryTree.updateUI();
                    File wri = new File("./" + ruta+ dirName);
                    wri.mkdir();
                }
            }
        }else{
            JOptionPane.showMessageDialog(null,"Debe seleccionar elemento!", "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        jd_logIn.pack();
        jd_logIn.setLocationRelativeTo(null);
        jd_logIn.setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        for (User x : userData) {
            if (x.getPassword().equals(pf_login_pass.getText()) && x.getUsername().equals(tf_login_user.getText())) {
                registeredUser = true;
                currentUser = x.getUsername();
            }
        }
        /* DESCOMENTAR ESTO PARA QUE FUNCIONE CON EL SERVER Y COMENTAR LODE ARRIBA
        if( _conectar.Login( tf_login_user.getText(), pf_login_pass.getPassword().toString() ) ){
            registeredUser = true;
            currentUser = x.getUsername();
        }
        */
        if (registeredUser) {
            jd_logIn.dispose();
            jm_command.setEnabled(true);
            jm_file.setEnabled(true);
            tf_login_user.setText("");
            pf_login_pass.setText("");
            initialRootFilesLoad();
        } else {
            JOptionPane.showMessageDialog(null, "User and Password don't match.", "Invalid Information", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        jd_register.pack();
        jd_register.setLocationRelativeTo(null);
        jd_register.setVisible(true);
        tf_login_user.setText("");
        pf_login_pass.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:        
        String tabName = JOptionPane.showInputDialog(null, "Please enter tab name", "New File");
        if (!tabName.equals("")) {
            openEditor(tabName);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if (!pf_register_pass.getText().isEmpty() && !pf_register_pass.getText().isEmpty() && !tf_register_name.getText().isEmpty()) {
            if (pf_register_pass.getText().equals(pf_register_cpass.getText())) {
                userData.add(new User(tf_register_name.getText(), pf_register_pass.getText()));
                try {
                    registerUser();
                } catch (RemoteException ex) {
                    
                }
                jd_register.dispose();
                tf_register_name.setText("");
                pf_register_pass.setText("");
                pf_register_cpass.setText("");
                JOptionPane.showMessageDialog(null, "User created Successfully.", "User Registered!", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Passwords don't match.", "Registration Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please fill in all fields.", "Registration Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        jd_register.dispose();
        tf_register_name.setText("");
        pf_register_pass.setText("");
        pf_register_cpass.setText("");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jd_registerWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_jd_registerWindowClosed
        // TODO add your handling code here:
        tf_register_name.setText("");
        pf_register_pass.setText("");
        pf_register_cpass.setText("");
    }//GEN-LAST:event_jd_registerWindowClosed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        JSeparator currentSeparator = (JSeparator) tb_editor.getComponent(tb_editor.getSelectedIndex());
        JTextPane currentEditor = (JTextPane) currentSeparator.getComponent(0);

        tb_editor.remove(tb_editor.getComponent(tb_editor.getSelectedIndex()));
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        registeredUser = !registeredUser;
        jm_command.setEnabled(false);
        jm_file.setEnabled(false);
        jd_logIn.pack();
        jd_logIn.setLocationRelativeTo(null);
        jd_logIn.setVisible(true);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void directoryTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_directoryTreeMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_directoryTreeMousePressed

    private void pf_login_passKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_pf_login_passKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            for (User x : userData) {
                if (x.getPassword().equals(pf_login_pass.getText()) && x.getUsername().equals(tf_login_user.getText())) {
                    registeredUser = true;
                    currentUser = x.getUsername();
                }
            }
            /* DESCOMENTAR ESTO PARA QUE FUNCIONE CON EL SERVER Y COMENTAR LODE ARRIBA
            if( _conectar.Login( tf_login_user.getText(), pf_login_pass.getPassword().toString() ) ){
                registeredUser = true;
                currentUser = x.getUsername();
            }
            */
            if (registeredUser) {
                jd_logIn.dispose();
                jm_command.setEnabled(true);
                jm_file.setEnabled(true);
                tf_login_user.setText("");
                pf_login_pass.setText("");

                initialRootFilesLoad();

            } else {
                JOptionPane.showMessageDialog(null, "User and Password don't match.", "Invalid Information", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_pf_login_passKeyPressed

    private void tf_login_userKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_login_userKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            for (User x : userData) {
                if (x.getPassword().equals(pf_login_pass.getText()) && x.getUsername().equals(tf_login_user.getText())) {
                    registeredUser = true;
                    currentUser = x.getUsername();
                }
            }
            /* DESCOMENTAR ESTO PARA QUE FUNCIONE CON EL SERVER Y COMENTAR LODE ARRIBA
            if( _conectar.Login( tf_login_user.getText(), pf_login_pass.getPassword().toString() ) ){
                registeredUser = true;
                currentUser = x.getUsername();
            }
            */
            if (registeredUser) {
                jd_logIn.dispose();
                jm_command.setEnabled(true);
                jm_file.setEnabled(true);
                tf_login_user.setText("");
                pf_login_pass.setText("");
                initialRootFilesLoad(); //Carga el arbol con lo que tiene la root
            } else {
                JOptionPane.showMessageDialog(null, "User and Password don't match.", "Invalid Information", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_tf_login_userKeyPressed

    private void directoryTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_directoryTreeValueChanged
        // TODO add your handling code here:
        _selectedNode = (DefaultMutableTreeNode) directoryTree.getLastSelectedPathComponent();
        if (_selectedNode == null) 
            return;

        Object nodeInfo = _selectedNode.getUserObject();
        if (_selectedNode.isLeaf()) {
        } else {
        }
    }//GEN-LAST:event_directoryTreeValueChanged

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        JSeparator currentSeparator = (JSeparator) tb_editor.getComponent(tb_editor.getSelectedIndex());
        JTextPane currentEditor = (JTextPane) currentSeparator.getComponent(0);

        tb_editor.remove(tb_editor.getComponent(tb_editor.getSelectedIndex()));
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formWindowClosing

    void openEditor(String tabName) {
        newTab = new JSeparator();
        tp_editor = new JTextPane();
        Dimension d = tb_editor.getSize();
        tp_editor.setSize(d);
        newTab.add(tp_editor);
        tb_editor.addTab(tabName, newTab);
        separatorList.add(newTab);
    }

    void createCache() {
        File cacheDir = new File("./Cache");
        File fileSystem = new File("./Cache/Users");
        File files = new File("./Cache/Files");
        try {
            cacheDir.mkdir();
            fileSystem.mkdir();
            files.mkdir();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    void loadUser() { // Este metodo debe ser modificado
        //Este método carga todos los usuarios del sistema
        BufferedReader br = null;
        try {
            String sCurrentLine;
            br = new BufferedReader(new FileReader("./Cache/Users/Users.txt"));
            while ((sCurrentLine = br.readLine()) != null) {
                String array[] = sCurrentLine.split(",");
                userData.add(new User(array[0], array[1]));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    boolean registerUser() throws RemoteException { // Este metodo debe ser modificado
        // Este método es para crear nuevos usuarios
//        BufferedWriter bw = null;
//        try {
//            bw = new BufferedWriter(new FileWriter("./Cache/Users/Users.txt"));
//            for (User x : userData) {
//                bw.write("" + x.getUsername() + "," + x.getPassword());
//                bw.newLine();
//            }
//            bw.flush();
//            bw.close();
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
        return _conectar.Register( tf_register_name.getText(), pf_register_pass.getPassword().toString() );
    }

    public void initialRootFilesLoad() { // Este metodo debe ser modificado
        //Este metodo sirve para cargar el directorio raiz en el arbol 
        //(sera lo unico que se mostrara inicialmente)
        File initialDirectory = new File("./AFS");
//        if (initialDirectory.exists()) {
//            File arrayFiles[] = initialDirectory.listFiles();
//            userTM = (DefaultTreeModel) directoryTree.getModel();
//            userRoot = (DefaultMutableTreeNode) userTM.getRoot();
//            userRoot.setUserObject(new String(currentUser));
//            DefaultMutableTreeNode newdir;
//            for (File file : arrayFiles) {
//                newdir = new DefaultMutableTreeNode(file);
//                userRoot.add(newdir);
//            }
//            userTM.setRoot(userRoot);
//            userTM.reload();
//            directoryTree.setModel(userTM);
//            directoryTree.setCellRenderer(new DefaultTreeCellRenderer() {
//                @Override
//                public Component getTreeCellRendererComponent(JTree tree,
//                        Object value, boolean selected, boolean expanded,
//                        boolean isLeaf, int row, boolean focused) {
//                    Component c = super.getTreeCellRendererComponent(tree, value,
//                            selected, expanded, isLeaf, row, focused);
//                    DefaultMutableTreeNode aNode = (DefaultMutableTreeNode) value;
//                    if (aNode.getUserObject() instanceof File){
//                        File fs = (File)aNode.getUserObject();
//                        try {
//                            System.out.println(fs.getCanonicalPath());
//                        } catch (IOException ex) {
//                            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
//                        }
//                    }
//                    return c;
//                }
//            }); 
//        } else {
//            System.out.println("no existe");
//        }
        userRoot = new DefaultMutableTreeNode("AFS");
        File arrayFiles[] = initialDirectory.listFiles();
        for (File f : arrayFiles)
            f.delete();
        _struct = _conectar.openDir();
        String _saveStruct = "./AFS/";
        for( DirStruct data: _struct ){
            DefaultMutableTreeNode aNode = new DefaultMutableTreeNode();
            aNode.setUserObject(data.getName());
            if( data.isDir() && data.getSubDirs() != null )
                addToRoot( aNode, data.getSubDirs(), _saveStruct );            
            userRoot.add(aNode);
        }
        userTM = new DefaultTreeModel(userRoot);
        directoryTree.getSelectionModel().setSelectionMode
                (TreeSelectionModel.SINGLE_TREE_SELECTION);
        directoryTree.setModel( userTM );
        DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer();
        directoryTree.setCellRenderer(renderer);
    }
    
    private class MyRenderJTree extends DefaultTreeCellRenderer {
        ImageIcon loadIcon = new ImageIcon("./Images/yellow-folder-closed.png");
        boolean _dir;
        public MyRenderJTree(boolean isDir){
            _dir = isDir;
        }
        
        @Override
        public Component getTreeCellRendererComponent(JTree tree,
                Object value, boolean selected, boolean expanded,
                boolean isLeaf, int row, boolean focused) {
            Component c = super.getTreeCellRendererComponent(tree, value,
                    selected, expanded, isLeaf, row, focused);
            DefaultMutableTreeNode aNode = (DefaultMutableTreeNode) value;
            if (tree.getModel().getRoot().equals(aNode)) {
                setIcon(loadIcon);
                setToolTipText("");
            } else if (aNode.getChildCount() > 0) {
                setIcon(loadIcon);
                setToolTipText("");
            }else{
                if( _dir ){
                    setIcon(loadIcon);
                }
            }
            return c;
        }
    } 
    
    private void addToRoot( DefaultMutableTreeNode aNode, ArrayList<DirStruct> data2, String save ){
        save += aNode.getUserObject().toString() + "/";
        File tmp2 = new File(save);
        tmp2.mkdir();
        for( DirStruct data: data2 ){
            DefaultMutableTreeNode tmp = new DefaultMutableTreeNode();
            tmp.setUserObject(data.getName());
            if( data.isDir() && data.getSubDirs() != null )
                addToRoot( tmp, data.getSubDirs(), save );
            aNode.add(tmp);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree directoryTree;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JDialog jd_logIn;
    private javax.swing.JDialog jd_register;
    private javax.swing.JMenu jm_command;
    private javax.swing.JMenu jm_file;
    private javax.swing.JPasswordField pf_login_pass;
    private javax.swing.JPasswordField pf_register_cpass;
    private javax.swing.JPasswordField pf_register_pass;
    private javax.swing.JTabbedPane tb_editor;
    private javax.swing.JTextField tf_login_user;
    private javax.swing.JTextField tf_register_name;
    // End of variables declaration//GEN-END:variables
    ArrayList<JSeparator> separatorList;
    ArrayList<User> userData;
    JSeparator newTab;
    JTextPane tp_editor;
    boolean registeredUser = false;
    String currentUser;
    DefaultTreeModel userTM;
    DefaultMutableTreeNode userRoot;
    ArrayList<DirStruct> _struct;
    DefaultMutableTreeNode _selectedNode;
}
